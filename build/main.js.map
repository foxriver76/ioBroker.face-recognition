{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.1.1\n */\n\nimport * as utils from '@iobroker/adapter-core';\n//import * as faceapi from 'face-api.js';\n\nclass FaceRecognition extends utils.Adapter {\n    private analyzeTimer?: NodeJS.Timer | null;\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'face-recognition'\n        });\n        this.on('ready', this.onReady.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        this.log.info(`Ready to get image data from ${this.config.url}`);\n        // TODO: test dev server\n        this.config.url = '';\n        this.config.interval = 5;\n\n        if (!this.config.url || !this.config.interval) {\n            this.log.warn('Please configure adapter first');\n            return;\n        }\n\n        this.analyzeImage();\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            if (this.analyzeTimer) {\n                clearTimeout(this.analyzeTimer);\n                this.analyzeTimer = null;\n            }\n            callback();\n        } catch {\n            callback();\n        }\n    }\n\n    /**\n     * Whole process of retriving image and analyzing it\n     */\n    private async analyzeImage(): Promise<void> {\n        if (this.analyzeTimer) {\n            this.analyzeTimer = null;\n        }\n\n        const image = await this.loadImage();\n        this.log.info(JSON.stringify(image));\n\n        this.analyzeTimer = setTimeout(() => this.analyzeImage(), this.config.interval * 1000);\n    }\n\n    /**\n     * Loads the image from the configured url\n     */\n    private async loadImage(): Promise<any> {\n        const response = await fetch(this.config.url);\n        this.log.info(JSON.stringify(response));\n        return response;\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new FaceRecognition(options);\n} else {\n    // otherwise start the instance directly\n    (() => new FaceRecognition())();\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,YAAuB;AAGvB,MAAM,wBAAwB,MAAM,QAAQ;AAAA,EAEjC,YAAY,UAAyC,CAAC,GAAG;AAC5D,UAAM,iCACC,UADD;AAAA,MAEF,MAAM;AAAA,IACV,EAAC;AACD,SAAK,GAAG,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AACxC,SAAK,GAAG,UAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAAA,EAC9C;AAAA,QAKc,UAAyB;AACnC,SAAK,IAAI,KAAK,gCAAgC,KAAK,OAAO,KAAK;AAE/D,SAAK,OAAO,MAAM;AAClB,SAAK,OAAO,WAAW;AAEvB,QAAI,CAAC,KAAK,OAAO,OAAO,CAAC,KAAK,OAAO,UAAU;AAC3C,WAAK,IAAI,KAAK,gCAAgC;AAC9C;AAAA,IACJ;AAEA,SAAK,aAAa;AAAA,EACtB;AAAA,EAKQ,SAAS,UAA4B;AACzC,QAAI;AACA,UAAI,KAAK,cAAc;AACnB,qBAAa,KAAK,YAAY;AAC9B,aAAK,eAAe;AAAA,MACxB;AACA,eAAS;AAAA,IACb,QAAE;AACE,eAAS;AAAA,IACb;AAAA,EACJ;AAAA,QAKc,eAA8B;AACxC,QAAI,KAAK,cAAc;AACnB,WAAK,eAAe;AAAA,IACxB;AAEA,UAAM,QAAQ,MAAM,KAAK,UAAU;AACnC,SAAK,IAAI,KAAK,KAAK,UAAU,KAAK,CAAC;AAEnC,SAAK,eAAe,WAAW,MAAM,KAAK,aAAa,GAAG,KAAK,OAAO,WAAW,GAAI;AAAA,EACzF;AAAA,QAKc,YAA0B;AACpC,UAAM,WAAW,MAAM,MAAM,KAAK,OAAO,GAAG;AAC5C,SAAK,IAAI,KAAK,KAAK,UAAU,QAAQ,CAAC;AACtC,WAAO;AAAA,EACX;AACJ;AAEA,IAAI,QAAQ,SAAS,QAAQ;AAEzB,SAAO,UAAU,CAAC,YAAuD,IAAI,gBAAgB,OAAO;AACxG,OAAO;AAEH,EAAC,OAAM,IAAI,gBAAgB,GAAG;AAClC;",
  "names": []
}
